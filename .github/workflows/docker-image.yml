name: Docker Image CI

on:
  push:
    branches: [ "main" ]
    # セマンティックバージョニングのタグ（例: v1.0.0）がプッシュされた時も実行
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ "main" ]
  
  # 手動実行を許可する
  workflow_dispatch:

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    # GHCRへの書き込み権限をジョブに付与
    permissions:
      contents: write      # To create releases and upload assets
      packages: write      # To push packages to GHCR
      pull-requests: read  # To automatically generate release notes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # (推奨) マルチプラットフォームビルドのためにQEMUをセットアップ
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # (推奨) Docker Composeが利用するBuildxをセットアップ
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # GITHUB_TOKENはGitHub Actionsが自動的に生成するシークレットです
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            # mainブランチへのプッシュ時は 'nightly' と 'latest' タグを付与
            type=raw,value=nightly,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            # セマンティックバージョニングのタグ
            type=semver,pattern={{version}}

      - name: Build and load Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          # docker-compose.override.yamlで指定されているDockerfileのパス
          file: ./docker/Dockerfile
          # プッシュはせず、後続のステップでスキャンするためにローカルにロードする
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          # metadata-actionが生成したタグのリストから最初のものをスキャン対象とする
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'table'
          # HIGH以上の脆弱性が検知されたらビルドを失敗させる
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

#      - name: Push Docker image to GHCR
#        # プルリクエスト時は実行せず、mainへのプッシュ時とタグプッシュ時のみ実行
#        if: github.event_name != 'pull_request'
#        run: docker push --all-tags ghcr.io/${{ github.repository }}

      # --- Formal Release (for tags) ---
      - name: Save Docker image to a tarball for release
        # タグがプッシュされた時のみ実行
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          IMAGE_NAME=$(echo '${{ fromJSON(steps.meta.outputs.json).tags[0] }}')
          TAR_FILENAME="image-${{ github.ref_name }}.tar"
          docker save -o "${TAR_FILENAME}" "${IMAGE_NAME}"
          gzip "${TAR_FILENAME}"
          echo "ASSET_PATH=${TAR_FILENAME}.gz" >> $GITHUB_ENV

      - name: Create Formal Release and Upload Asset
        # タグがプッシュされた時のみ実行
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ASSET_PATH }}
          generate_release_notes: true

      # --- Nightly Release (for main branch) ---
      - name: Create or Update Nightly Release
        # mainブランチへのプッシュ時のみ実行
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          name: "Nightly Build (Run ID ${{ github.run_id }})"
          body: |
            This is an automated nightly build from the main branch.
            Commit: `${{ github.sha }}`
            # Docker Image: `ghcr.io/${{ github.repository }}:nightly`
          tag_name: nightly
          make_latest: true